IPT_Qos_Performance <- read.csv("~/Dropbox/data hack/Data Samples/IPT_Qos_Performance.csv")
View(IPT_Qos_Performance)
IPT_Qos_Performance
IPT_Traffic
IPT_Traffic <- read.csv("~/Dropbox/data hack/Data Samples/IPT_Traffic.csv")
IPT_Traffic
summary(IPT_Traffic)
head(IPT_Traffic)
summary(IPT_Traffic$SPEED.Mpbs.)
hist(IPT_Traffic$SPEED.Mpbs.)
table(IPT_Traffic$SPEED.Mpbs.)
cor(IPT_Traffic$SPEED.Mpbs., IPT_Traffic$MINIMUM_COMMITMENT.Mbps.)
IPT_Traffic$Extra <- IPT_Traffic$SPEED.Mpbs. - IPT_Traffic$MINIMUM_COMMITMENT.Mbps.
summary(IPT_Traffic$Extra)
IPT_Traffic$Extra
sum(IPT_Traffic$Extra)
sum(IPT_Traffic$SPEED.Mpbs.)
Mobility_Signaling_Operator_Traffic <- read.csv("/Volumes/Windows/DataHack14/VivekAnalyses/Data Samples/Mobility_Signaling_Operator_Traffic.csv")
View(Mobility_Signaling_Operator_Traffic)
Mobility_Signaling_Operator_Traffic <- read.csv("/Volumes/Windows/DataHack14/VivekAnalyses/Data Samples/Mobility_Signaling_Operator_Traffic.csv")
str(Mobility_Signaling_Operator_Traffic)
head(Mobility_Signaling_Operator_Traffic)
str(Mobility_Signaling_Operator_Traffic)
head(Mobility_Signaling_Operator_Traffic)
str(Mobility_Signaling_Operator_Traffic$ORIGINATION_NETWORK_ID)
str(Mobility_Signaling_Operator_Traffic$DESTINATION_NETWORK_ID)
str(Mobility_Signaling_Operator_Traffic)
str(Mobility_Signaling_Operator_Traffic$ORIGINATION_COUNTRY)
sum(Mobility_Signaling_Operator_Traffic$OUTBOUND_MESSAGES)
Mobility_Signaling_Peering_Traffic <- read.csv("~/Dropbox/data hack/Data Samples/Mobility_Signaling_Peering_Traffic.csv")
View(Mobility_Signaling_Peering_Traffic)
Mobility_Signaling_Peering_Traffic <- read.csv("~/Dropbox/data hack/Data Samples/Mobility_Signaling_Peering_Traffic.csv")
Mobility_Signaling_Peering_Traffic
head(Mobility_Signaling_Peering_Traffic)
str(Mobility_Signaling_Peering_Traffic)
table(Mobility_Signaling_Peering_Traffic$OUTBOUND_MESSAGES)
hist(Mobility_Signaling_Peering_Traffic$OUTBOUND_MESSAGES)
head(Mobility_Signaling_Peering_Traffic)
str(Mobility_Signaling_Peering_Traffic)
str(Mobility_Signaling_Peering_Traffic)
table(Mobility_Signaling_Peering_Traffic$PEERING_CUSTOMER_ID, )
table(Mobility_Signaling_Peering_Traffic$PEERING_CUSTOMER_ID)
subset(Mobility_Signaling_Peering_Traffic$PEERING_CUSTOMER_ID = "iBN0")
subset(Mobility_Signaling_Peering_Traffic$PEERING_CUSTOMER_ID == "iBN0")
?subset
subset(Mobility_Signaling_Peering_Traffic, Mobility_Signaling_Peering_Traffic$PEERING_CUSTOMER_ID == "iBN0")
table(Mobility_Signaling_Peering_Traffic$PEERING_CUSTOMER_ID)
Mobility_Signaling_Peering_Traffic
View(Mobility_Signaling_Operator_Traffic)
table(Mobility_Signaling_Peering_Traffic$PEERING_CUSTOMER_ID)
Mobility_Signaling_Peering_Traffic
subset(Mobility_Signaling_Peering_Traffic, Mobility_Signaling_Peering_Traffic$PEERING_CUSTOMER_ID == "iBN0")
Mobility_Signaling_Peering_Traffic
sum(Mobility_Signaling_Peering_Traffic$OUTBOUND_MESSAGES)
sum(Mobility_Signaling_Peering_Traffic$INBOUND_MESSAGES)
?aggregate
aggregate(Mobility_Signaling_Peering_Traffic$PEERING_CUSTOMER_ID, Mobility_Signaling_Peering_Traffic$OUTBOUND_MESSAGES)
aggregate(Mobility_Signaling_Peering_Traffic$PEERING_CUSTOMER_ID, Mobility_Signaling_Peering_Traffic$OUTBOUND_MESSAGES, sum)
aggregate(Mobility_Signaling_Peering_Traffic$PEERING_CUSTOMER_ID)
aggregate(Mobility_Signaling_Peering_Traffic$PEERING_CUSTOMER_ID ~ Mobility_Signaling_Peering_Traffic$OUTBOUND_MESSAGES, data = Mobility_Signaling_Peering_Traffic, FUN=sum)
str(Mobility_Signaling_Peering_Traffic)
str(Mobility_Signaling_Peering_Traffic)
aggregate(Mobility_Signaling_Peering_Traffic$OUTBOUND_MESSAGES ~ Mobility_Signaling_Peering_Traffic$PEERING_CUSTOMER_ID, data = Mobility_Signaling_Peering_Traffic, FUN=sum)
aggregate(Mobility_Signaling_Peering_Traffic$INBOUND_MESSAGES ~ Mobility_Signaling_Peering_Traffic$PEERING_CUSTOMER_ID, data = Mobility_Signaling_Peering_Traffic, FUN=sum)
View(Mobility_Signaling_Operator_Traffic)
table(aggregate(Mobility_Signaling_Peering_Traffic$INBOUND_MESSAGES ~ Mobility_Signaling_Peering_Traffic$PEERING_CUSTOMER_ID, data = Mobility_Signaling_Peering_Traffic, FUN=sum))
aggregate(Mobility_Signaling_Peering_Traffic$INBOUND_MESSAGES ~ Mobility_Signaling_Peering_Traffic$PEERING_CUSTOMER_ID, data = Mobility_Signaling_Peering_Traffic, FUN=sum)
INBOUND<-aggregate(Mobility_Signaling_Peering_Traffic$INBOUND_MESSAGES ~ Mobility_Signaling_Peering_Traffic$PEERING_CUSTOMER_ID, data = Mobility_Signaling_Peering_Traffic, FUN=sum)
OUTBOUNBD<-aggregate(Mobility_Signaling_Peering_Traffic$INBOUND_MESSAGES ~ Mobility_Signaling_Peering_Traffic$PEERING_CUSTOMER_ID, data = Mobility_Signaling_Peering_Traffic, FUN=sum)
OUTBOUND<-aggregate(Mobility_Signaling_Peering_Traffic$INBOUND_MESSAGES ~ Mobility_Signaling_Peering_Traffic$PEERING_CUSTOMER_ID, data = Mobility_Signaling_Peering_Traffic, FUN=sum)
OUTBOUND
str(OU)
str(OUTBOUND)
rm(OUTBOUNBD)
OUTBOUND
?sort
?order
?order
str(OUTBOUND)
order(OUTBOUND, OUTBOUND$Mobility_Signaling_Peering_Traffic$INBOUND_MESSAGES)
str(OUTBOUND)
OUTBOUND[order(OUTBOUND$Mobility_Signaling_Peering_Traffic$INBOUND_MESSAGES)]
OUTBOUND[order(OUTBOUND$Mobility_Signaling_Peering_Traffic$INBOUND_MESSAGES),]
OUTBOUND[,order(OUTBOUND$Mobility_Signaling_Peering_Traffic$INBOUND_MESSAGES)]
OUTBOUND[order(OUTBOUND$Mobility_Signaling_Peering_Traffic$INBOUND_MESSAGES),]
OUTBOUND
str(OUTBOUND)
OUTBOUND[order(OUTBOUND$Mobility_Signaling_Peering_Traffic$INBOUND_MESSAGES),]
attach(OUTBOUND)
detach(OUTBOUND)
INBOUND
?INBOUND
INBOUND
OUTBOUND[order(OUTBOUND),]
OUTBOUND[order(OUTBOUND$Mobility_Signaling_Peering_Traffic$INBOUND_MESSAGES),]
OUTBOUND
str(OUTBOUND)
OUTBOUND[order(OUTBOUND$Mobility_Signaling_Peering_Traffic$INBOUND_MESSAGES),]
OUTBOUND[,order(OUTBOUND$Mobility_Signaling_Peering_Traffic$INBOUND_MESSAGES)]
OUTBOUND[,order(Mobility_Signaling_Peering_Traffic$INBOUND_MESSAGES)]
attach(OUTBOUND)
OUTBOUND[,order(Mobility_Signaling_Peering_Traffic$INBOUND_MESSAGES)]
OUTBOUND[,order(OUTBOUND$Mobility_Signaling_Peering_Traffic$INBOUND_MESSAGES)]
OUTBOUND<-aggregate(Mobility_Signaling_Peering_Traffic$INBOUND_MESSAGES ~ Mobility_Signaling_Peering_Traffic$PEERING_CUSTOMER_ID, data = Mobility_Signaling_Peering_Traffic, FUN=sum)
OUTBOUND
INBOUND
OUTBOUND[,order(OUTBOUND$Mobility_Signaling_Peering_Traffic$INBOUND_MESSAGES)]
OUTBOUND$Mobility_Signaling_Peering_Traffic$INBOUND_MESSAGES
OUTBOUND<-aggregate(Mobility_Signaling_Peering_Traffic$INBOUND_MESSAGES ~ Mobility_Signaling_Peering_Traffic$PEERING_CUSTOMER_ID, data = Mobility_Signaling_Peering_Traffic, FUN=sum)
OUTBOUND
STR(OUTBOUND)
STR(OUTBOUND)
Str(OUTBOUND)
str(OUTBOUND)
OUTBOUND$Mobility_Signaling_Peering_Traffic$INBOUND_MESSAGES
OUTBOUND[,1]
OUTBOUND[,2]
OUTBOUND[,order(OUTBOUND[,2]]
OUTBOUND[,order(OUTBOUND[,2]),]
OUTBOUND[order(OUTBOUND[,2]),]
?order
OUTBOUND[order(OUTBOUND[,2], decreasing=FALSE),]
OUTBOUND[order(OUTBOUND[,2], decreasing=TRUE),]
OUTBOUND <-  OUTBOUND[order(OUTBOUND[,2], decreasing=TRUE),]
OUTBOUND
OUTBOUND[1:10,]
topCustomers <- OUTBOUND[1:10,][2]
OUTBOUND[1:10,][2]
OUTBOUND[1:10,][1]
topcustomers <- OUTBOUND[1:10,][1]
topcustomer
topcustomers
OUTBOUND<-aggregate(Mobility_Signaling_Peering_Traffic$OUTBOUND_MESSAGES ~ Mobility_Signaling_Peering_Traffic$PEERING_CUSTOMER_ID, data = Mobility_Signaling_Peering_Traffic, FUN=sum)
INBOUND<-aggregate(Mobility_Signaling_Peering_Traffic$INBOUND_MESSAGES ~ Mobility_Signaling_Peering_Traffic$PEERING_CUSTOMER_ID, data = Mobility_Signaling_Peering_Traffic, FUN=sum)
topCustomersOut <- OUTBOUND[1:10,][1]
INBOUND <- INBOUND[order(INBOUND[,2], decreasing=TRUE),]
INBOUND[1:10,]
topCustomersIn
topCustomersIn <- INBOUND[1:10,][1]
topCustomersIn
update('arules')
update("arules")
install.packages("arules")
data("Adult")
library('arules')
data("Adult")
r1 <- apriori(Adult[1:1000], parameter = list(support = 0.5))
r1 <- apriori(Adult[1:1000], parameter = list(support = 0.5))
r2 <- apriori(Adult[1001:2000], parameter = list(support = 0.5))
r_comb <- c(r1, r2)
duplicated(r_comb)
data("Groceries")
s <- Groceries[,itemFrequency(Groceries)>0.05]
d_jaccard <- dissimilarity(s, which = "items")
plot(hclust(d_jaccard, method = "ward"))
## cluster transactions for a sample of Adult
data("Adult")
s <- sample(Adult, 500)
## calculate Jaccard distances and do hclust
d_jaccard <- dissimilarity(s)
hc <- hclust(d_jaccard)
plot(hc)
## get 20 clusters and look at the difference of the item frequencies (bars)
## for the top 20 items) in cluster 1 compared to the data (line)
assign <- cutree(hc, 20)
itemFrequencyPlot(s[assign==1], population=s, topN=20)
## calculate affinity-based distances and do hclust
d_affinity <- dissimilarity(s, method = "affinity")
hc <- hclust(d_affinity)
plot(hc)
## cluster rules
rules <- apriori(Adult, parameter=list(support=0.3))
rules <- subset(rules, subset = lift > 2)
## use affinity
## we need to supply the item affinities from the dataset (sample)
d_affinity <- dissimilarity(rules, method = "affinity",
args = list(affinity = affinity(s)))
plot(hclust(d_affinity))
plot(hclust(d_affinity))
data("Adult")
rules <- apriori(Adult,
parameter = list(supp = 0.5, conf = 0.9,
target = "rules"))
summary(rules)
Adult
summary(adult)
summary(Adult)
str(Adult)
options(java.parameters = "-Xm30000m")
library(zipcode)
library(plyr)
library(rJava)
require(xlsx)
require(XLConnect)
file <- system.file("efile_CSJ_2014", "efile_CSJ_2014.xlsx", package = "xlsx")
res <- read.xlsx(file, 1) # read the second sheet
Nursing <- read.csv("~/Github/bayes-nursing-homes/California_Nursing_Home_-_ALL_Data.csv")
#View(California_Nursing_Home_._ALL_Data
Nursing
Nursing <- read.csv("~/Github/bayes-nursing/California_Nursing_Home_-_ALL_Data.csv")
Nursing
str(Nursing)
nursing$f_zip
nursing <- read.csv("~/Github/bayes-nursing/California_Nursing_Home_-_ALL_Data.csv")
nursing$f_zip
nursing$zip_yr65to84
nursing$zip_yr45to64
nursing$zip_less45
nursing$zippop
hist(nursing$zippop)
header(nursing)
head(nursing)
View(California_Nursing_Home_._ALL_Data)
View(nursing)
unique(nursing$f_zip)
count(unique(nursing$f_zip))
length(unique(nursing$f_zip)))
length(unique(nursing$f_zip))
len(nursing)
nrow(nursing)
justzip <- numeric()
str(Nursing)
for i in 1:584 {
justzip[i] <- substr(nursing$f_zip[i],1, 5)
}
justzip <- numeric()
for i in 1:584 {
justzip[i] <- substr(nursing$f_zip[i],1, 5)
}
justzip <- numeric()
for( i in 1:584) {
justzip[i] <- substr(nursing$f_zip[i],1, 5)
}
justzip
str(justzip)
nursing$justzip <- justzip
head(nursing)
write.csv(nursing, sep = ',')
write.csv(nursing, file = "nursing.csv", sep = ',')
write.csv(nursing, file = "nursing.csv")
getwd()
setwd('~/Github/bayes-nursing/')
write.csv(nursing, file = "nursing.csv")
cor(nursing$zip_CMS_overall_rating[!is.na(nursing$zip_CMS_overall_rating) & !is.na(nursing$zip_nhoverall_rating)],
nursing$zip_nhoverall_rating[!is.na(nursing$zip_CMS_overall_rating) & !is.na(nursing$zip_nhoverall_rating)])
cor(nursing$zip_CMS_overall_rating[!is.na(nursing$zip_CMS_overall_rating) & !is.na(nursing$zip_nhoverall_rating)],
nursing$zip_nhoverall_rating[!is.na(nursing$zip_CMS_overall_rating) & !is.na(nursing$zip_nhoverall_rating)])
?cor
cor(nursing$zip_CMS_overall_rating, nursing$zip_nhoverall_rating)
cor(nursing$zip_CMS_overall_rating, nursing$zip_nhoverall_rating, na.rm = TRUE)
cor(nursing$zip_CMS_overall_rating, nursing$zip_nhoverall_rating, na.rm = FALSE)
nursing$zip_CMS_overall_rating
cor(nursing$zip_CMS_overall_rating[!is.na(nursing$zip_CMS_overall_rating) & !is.na(nursing$zip_nhoverall_rating)],
nursing$zip_nhoverall_rating[!is.na(nursing$zip_CMS_overall_rating) & !is.na(nursing$zip_nhoverall_rating)])
plot(nursing$zip_CMS_overall_rating[!is.na(nursing$zip_CMS_overall_rating) & !is.na(nursing$zip_nhoverall_rating)],
nursing$zip_nhoverall_rating[!is.na(nursing$zip_CMS_overall_rating) & !is.na(nursing$zip_nhoverall_rating)])
getwd()
setwd("/Users/Vivek/Github/bayes-nursing")
nrow(nursing)
nursing$justzip <- justzip
write.csv(nursing, "nursing_zip_fixed.csv")
cor(nursing$zip_CMS_overall_rating, nursing$zip_nhoverall_rating, na.rm = TRUE)
cor(x = nursing$zip_CMS_overall_rating, y = nursing$zip_nhoverall_rating, na.rm = TRUE)
?cor
fit <- lm(zip_CMS_overall_rating ~ zip_state_penalty_amount + zip_total_total +
zip_total_staff + zip_total_rights
+ zip_total_nutri
+ zip_total_environ
+ zip_total_care
+ zip_total_admin
+ zip_total_abuse, data=nursing)
summary(fit)
fit <- lm(zip_CMS_overall_rating ~ zip_state_penalty_amount
#          + zip_total_total
+ zip_total_staff
+ zip_total_rights
+ zip_total_nutri
+ zip_total_environ
+ zip_total_care
+ zip_total_admin
+ zip_total_abuse, data=nursing)
summary(fit)
str(nursing$zip_state_penalty_amount)
cor(nursing$zip_state_penalty_amount, zip_CMS_overall_rating)
cor(nursing$zip_state_penalty_amount, nursing$zip_CMS_overall_rating)
cor(nursing$zip_state_penalty_amount, nursing$zip_CMS_overall_rating use = "complete.obs")
cor(nursing$zip_state_penalty_amount, nursing$zip_CMS_overall_rating, use = "complete.obs")
cor(x = nursing$zip_CMS_overall_rating, y = nursing$zip_nhoverall_rating, na.rm = TRUE)
cor(nursing$zip_state_penalty_amount, nursing$zip_CMS_overall_rating, use = "complete.obs")
cor(nursing$zip_state_penalty_amount, nursing$zip_CMS_overall_rating, use = "complete.obs")
cor(nursing)
cor.plot(nursing)
corrplot(nursing)
install.packages("corrplot")
library(corrplot)
corrplot(nursing)
cor(nursing)
library(corrgram)
install.packages("corrgram")
library(corrgram)
corrgram(nuring)
corrgram(nursing)
nursing
nursing$zip_occup_rate
is.na(nursing$zip_occup_rate)
length(is.na(nursing$zip_occup_rate))
nursing$zip_occup_rate
sum(is.na(nursing$zip_occup_rate))
nursing$zip_numbeds
nursing$zip_non_profit
nursing$zip_num_facilities
nursing$num_facilities
nursing$num_facilities
nursing$num_facilities * nursing$zip_numbeds
nursing$zip_occup_rate
nursing$num_facilities * nursing$zip_numbeds * (1-nursing$zip_occup_rate)/100
nursing$num_facilities * nursing$zip_numbeds * (1-nursing$zip_occup_rate/100)
nursing$num_beds = nursing$num_facilities * nursing$zip_numbeds * (1-nursing$zip_occup_rate/100)
nursing$num_emtpy_beds = nursing$num_facilities * nursing$zip_numbeds * (1-nursing$zip_occup_rate/100)
nursing$total_beds = nursing$num_facilities * nursing$zip_numbeds
hist(nursing$num_empty_beds)
str(nursing$num_empty_beds)
nursing$num_empty_beds = nursing$num_facilities * nursing$zip_numbeds * (1-nursing$zip_occup_rate/100)
nursing$total_beds = nursing$num_facilities * nursing$zip_numbeds
str(nursing$num_empty_beds)
nursing$num_empty_beds
?hist
hist(nursing$num_empty_beds)
nursing$num_empty_beds
write.csv(nursing, "nursing_zip_fixed.csv")
getwd()
nursing$justzip
str(nursing)
head(nursing)
nursing$justzip
str(nursing$justzip)
nursing$justzip <- as.int(justzip)
nursing$justzip <- as.numeric(justzip)
str(nursing$justzip)
write.csv(nursing, "nursing_zip_fixed.csv")
country <- "United States"
nursing$country <- country
nursing$country
write.csv(nursing, "nursing_zip_fixed.csv")
str(nursing$num_emtpy_beds)
data.frame(nursing[,c("country")]
data.frame(nursing[,c("country")])
data.frame(nursing[,c("country, justzip")])
data.frame(nursing[,c("nursing$country", "nursing$justzip")])
data.frame(nursing$country, nursing$justzip)
just_zip <- numeric()
for( i in 1:584) {
just_zip[i] <- substr(nursing$f_zip[i],1, 5)
}
nursing$just_zip <- as.numeric(just_zip)
data.frame(nursing$country, nursing$just_zip, nursing$num_empty_beds)
final_nursing_frame <- data.frame(nursing$country, nursing$just_zip, nursing$num_empty_beds, nursing$total_beds, nursing$zip_CMS_overall_rating)
write.csv(final_nursing_frame, "nursing_les.csv")
write.csv(final_nursing_frame, "nursing_less_data.csv")
nursing$zippop
nursing$num_empty_beds
str(nursing$num_empty_beds)
nursing$zip_over85
nursing$zip_less45
nursing$zip_yr45to64
nursing$zip_yr45to64
final_nursing_frame <- data.frame(nursing$country, nursing$just_zip, nursing$num_empty_beds,
nursing$total_beds, nursing$zip_CMS_overall_rating, nursing$zippop)
write.csv(final_nursing_frame, "nursing_less_data.csv")
